import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { sessionsAPI, patientsAPI, staffAPI } from '../utils/api';
import { ArrowLeft, Calendar, Filter, ChevronLeft, ChevronRight, User, Plus } from 'lucide-react';
import SessionFormModal from '../components/SessionFormModal';

export default function SchedulePage() {
  const navigate = useNavigate();
  const [sessions, setSessions] = useState([]);
  const [patients, setPatients] = useState({});
  const [therapists, setTherapists] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [currentDate, setCurrentDate] = useState(new Date());
  const [viewMode, setViewMode] = useState('week'); // week, month
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [showSessionModal, setShowSessionModal] = useState(false);

  useEffect(() => {
    fetchScheduleData();
  }, []);

  const fetchScheduleData = async () => {
    try {
      setLoading(true);
      
      // Fetch all sessions
      const sessionsResponse = await sessionsAPI.getAll();
      const allSessions = sessionsResponse.data.data || [];
      setSessions(allSessions);
      
      // Fetch patients and therapists
      const patientsMap = {};
      const therapistsMap = {};
      
      const uniquePatientIds = [...new Set(allSessions.map((s) => s.patient_id))];
      const uniqueTherapistIds = [...new Set(allSessions.map((s) => s.therapist_id))];
      
      // Fetch patients
      await Promise.all(
        uniquePatientIds.map(async (patientId) => {
          try {
            const response = await patientsAPI.getById(patientId);
            patientsMap[patientId] = response.data.data;
          } catch (err) {
            console.error(`Failed to fetch patient ${patientId}:`, err);
          }
        })
      );
      
      // Fetch therapists
      await Promise.all(
        uniqueTherapistIds.map(async (therapistId) => {
          try {
            const response = await staffAPI.getById(therapistId);
            therapistsMap[therapistId] = response.data.data;
          } catch (err) {
            console.error(`Failed to fetch therapist ${therapistId}:`, err);
          }
        })
      );
      
      setPatients(patientsMap);
      setTherapists(therapistsMap);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to fetch schedule');
    } finally {
      setLoading(false);
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'cancelled':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'scheduled':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  // Filter sessions
  const filteredSessions = sessions.filter((session) => {
    if (selectedStatus !== 'all' && session.status !== selectedStatus) {
      return false;
    }
    
    const sessionDate = new Date(session.start_time);
    
    if (viewMode === 'week') {
      const weekStart = new Date(currentDate);
      weekStart.setDate(currentDate.getDate() - currentDate.getDay());
      weekStart.setHours(0, 0, 0, 0);
      
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 7);
      
      return sessionDate >= weekStart && sessionDate < weekEnd;
    } else {
      return (
        sessionDate.getMonth() === currentDate.getMonth() &&
        sessionDate.getFullYear() === currentDate.getFullYear()
      );
    }
  });

  // Group sessions by date
  const sessionsByDate = filteredSessions.reduce((acc, session) => {
    const date = new Date(session.start_time).toLocaleDateString();
    if (!acc[date]) {
      acc[date] = [];
    }
    acc[date].push(session);
    return acc;
  }, {});

  // Sort dates
  const sortedDates = Object.keys(sessionsByDate).sort((a, b) => {
    return new Date(a) - new Date(b);
  });

  const navigatePrevious = () => {
    const newDate = new Date(currentDate);
    if (viewMode === 'week') {
      newDate.setDate(currentDate.getDate() - 7);
    } else {
      newDate.setMonth(currentDate.getMonth() - 1);
    }
    setCurrentDate(newDate);
  };

  const navigateNext = () => {
    const newDate = new Date(currentDate);
    if (viewMode === 'week') {
      newDate.setDate(currentDate.getDate() + 7);
    } else {
      newDate.setMonth(currentDate.getMonth() + 1);
    }
    setCurrentDate(newDate);
  };

  const navigateToday = () => {
    setCurrentDate(new Date());
  };

  const getDateRangeText = () => {
    if (viewMode === 'week') {
      const weekStart = new Date(currentDate);
      weekStart.setDate(currentDate.getDate() - currentDate.getDay());
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 6);
      
      return `${weekStart.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
      })} - ${weekEnd.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
      })}`;
    } else {
      return currentDate.toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric',
      });
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-3">
              <button
                onClick={() => navigate('/dashboard')}
                className="btn-secondary flex items-center space-x-2"
              >
                <ArrowLeft className="w-4 h-4" />
                <span>Dashboard</span>
              </button>
              <button
                onClick={() => setShowSessionModal(true)}
                className="btn-primary flex items-center space-x-2"
              >
                <Plus className="w-4 h-4" />
                <span>New Session</span>
              </button>
            </div>
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-primary-100 rounded-lg flex items-center justify-center">
                  <Calendar className="w-5 h-5 text-primary-600" />
                </div>
                <div>
                  <h1 className="text-xl font-bold text-gray-900">Schedule</h1>
                  <p className="text-xs text-gray-500">{filteredSessions.length} sessions</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Controls */}
        <div className="mb-6 flex flex-wrap items-center justify-between gap-4">
          {/* Date Navigation */}
          <div className="flex items-center space-x-3">
            <button onClick={navigatePrevious} className="btn-secondary p-2">
              <ChevronLeft className="w-5 h-5" />
            </button>
            <div className="text-center min-w-[200px]">
              <p className="text-lg font-semibold text-gray-900">{getDateRangeText()}</p>
            </div>
            <button onClick={navigateNext} className="btn-secondary p-2">
              <ChevronRight className="w-5 h-5" />
            </button>
            <button onClick={navigateToday} className="btn-secondary">
              Today
            </button>
          </div>

          {/* View and Filter Controls */}
          <div className="flex items-center space-x-3">
            {/* View Mode Toggle */}
            <div className="flex bg-gray-100 rounded-lg p-1">
              <button
                onClick={() => setViewMode('week')}
                className={`px-3 py-1 text-sm font-medium rounded transition-colors ${
                  viewMode === 'week'
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Week
              </button>
              <button
                onClick={() => setViewMode('month')}
                className={`px-3 py-1 text-sm font-medium rounded transition-colors ${
                  viewMode === 'month'
                    ? 'bg-white text-gray-900 shadow-sm'
                    : 'text-gray-600 hover:text-gray-900'
                }`}
              >
                Month
              </button>
            </div>

            {/* Status Filter */}
            <div className="flex items-center space-x-2">
              <Filter className="w-4 h-4 text-gray-400" />
              <select
                value={selectedStatus}
                onChange={(e) => setSelectedStatus(e.target.value)}
                className="input py-2"
              >
                <option value="all">All Sessions</option>
                <option value="scheduled">Scheduled</option>
                <option value="completed">Completed</option>
                <option value="cancelled">Cancelled</option>
              </select>
            </div>
          </div>
        </div>

        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
            {error}
          </div>
        )}

        {loading ? (
          <div className="flex items-center justify-center py-12">
            <div className="text-center">
              <div className="w-16 h-16 border-4 border-primary-600 border-t-transparent rounded-full animate-spin mx-auto"></div>
              <p className="mt-4 text-gray-600">Loading schedule...</p>
            </div>
          </div>
        ) : filteredSessions.length === 0 ? (
          <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-12">
            <div className="text-center">
              <Calendar className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No sessions found</h3>
              <p className="text-gray-600 mb-6">
                {selectedStatus !== 'all' 
                  ? `No ${selectedStatus} sessions for this period`
                  : sessions.length === 0
                    ? 'Get started by creating your first session'
                    : 'No sessions in this time period'}
              </p>
              {sessions.length === 0 && (
                <button
                  onClick={() => setShowSessionModal(true)}
                  className="btn-primary inline-flex items-center space-x-2"
                >
                  <Plus className="w-4 h-4" />
                  <span>Create First Session</span>
                </button>
              )}
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            {sortedDates.map((date) => {
              const daySessions = sessionsByDate[date].sort(
                (a, b) => new Date(a.start_time) - new Date(b.start_time)
              );
              const dateObj = new Date(date);
              
              return (
                <div key={date} className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
                  {/* Date Header */}
                  <div className="bg-gray-50 border-b border-gray-200 px-6 py-3">
                    <h3 className="text-lg font-semibold text-gray-900">
                      {dateObj.toLocaleDateString('en-US', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric',
                      })}
                    </h3>
                    <p className="text-sm text-gray-500">{daySessions.length} sessions</p>
                  </div>

                  {/* Sessions List */}
                  <div className="divide-y divide-gray-200">
                    {daySessions.map((session) => {
                      const patient = patients[session.patient_id];
                      const therapist = therapists[session.therapist_id];
                      const sessionTime = new Date(session.start_time);
                      
                      return (
                        <div
                          key={session.id}
                          className="p-6 hover:bg-gray-50 transition-colors"
                        >
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center space-x-3 mb-2">
                                <span className="text-lg font-semibold text-gray-900">
                                  {sessionTime.toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit',
                                  })}
                                </span>
                                <span
                                  className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusColor(
                                    session.status
                                  )}`}
                                >
                                  {session.status || 'Scheduled'}
                                </span>
                                {session.is_follow_up && (
                                  <span className="px-2 py-1 text-xs font-medium rounded-full bg-purple-100 text-purple-800">
                                    Follow-up
                                  </span>
                                )}
                              </div>

                              <div className="flex items-center space-x-6 text-sm">
                                {/* Patient */}
                                <button
                                  onClick={() => navigate(`/patients/${session.patient_id}`)}
                                  className="flex items-center space-x-2 hover:text-primary-600 transition-colors"
                                >
                                  <div className="w-8 h-8 bg-primary-100 rounded-full flex items-center justify-center">
                                    <User className="w-4 h-4 text-primary-600" />
                                  </div>
                                  <div className="text-left">
                                    <p className="font-medium text-gray-900">
                                      {patient
                                        ? `${patient.first_name} ${patient.last_name}`
                                        : 'Unknown Patient'}
                                    </p>
                                    <p className="text-xs text-gray-500">Patient</p>
                                  </div>
                                </button>

                                {/* Therapist */}
                                {therapist && (
                                  <>
                                    <span className="text-gray-300">→</span>
                                    <button
                                      onClick={() => navigate(`/staff/${session.therapist_id}`)}
                                      className="flex items-center space-x-2 hover:text-primary-600 transition-colors"
                                    >
                                      <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                                        <span className="text-blue-600 font-medium text-xs">
                                          {therapist.first_name?.[0]}{therapist.last_name?.[0]}
                                        </span>
                                      </div>
                                      <div className="text-left">
                                        <p className="font-medium text-gray-900">
                                          {therapist.first_name} {therapist.last_name}
                                        </p>
                                        <p className="text-xs text-gray-500">Therapist</p>
                                      </div>
                                    </button>
                                  </>
                                )}
                              </div>

                              {session.periodicity && (
                                <p className="mt-2 text-sm text-gray-500">
                                  Recurring: {session.periodicity}
                                </p>
                              )}
                            </div>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })}
          </div>
        )}

        {/* Session Form Modal */}
        <SessionFormModal
          isOpen={showSessionModal}
          onClose={() => setShowSessionModal(false)}
          onSuccess={() => {
            fetchScheduleData();
            setShowSessionModal(false);
          }}
        />
      </main>
    </div>
  );
}

